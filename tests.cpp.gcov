        -:    0:Source:tests.cpp
        -:    0:Graph:tests.gcno
        -:    0:Data:tests.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include "list.cpp"
        -:    3:
        -:    4:using namespace std;
        -:    5:
        1:    6:int main()
        -:    7:{
        1:    8:    List<int>* L = new List<int>;
        -:    9:
        -:   10:    try
        -:   11:    {
        1:   12:        L->Insert(1, 7);
        -:   13:    }
        2:   14:    catch (const List<int>::LIST_ERR &ex)
        -:   15:    {
        1:   16:        if (ex == List<int>::ESIZE)
        1:   17:            cout << "Test_1\t->\tPASSED" << endl;
        -:   18:        else
    =====:   19:            cout << "Test_1\t->\tFAILED" << endl;
        -:   20:    }
    =====:   21:    catch (...)
        -:   22:    {
    =====:   23:        cout << "Test_1\t->\tFAILED" << endl;
        -:   24:    }
        -:   25:
        -:   26:    try
        -:   27:    {
        1:   28:        L->Delete(1);
        -:   29:    }
        2:   30:    catch (const List<int>::LIST_ERR &ex)
        -:   31:    {
        1:   32:        if (ex == List<int>::EEMPTY)
        1:   33:            cout << "Test_2\t->\tPASSED" << endl;
        -:   34:        else
    =====:   35:            cout << "Test_2\t->\tFAILED" << endl;
        -:   36:    }
    =====:   37:    catch (...)
        -:   38:    {
    =====:   39:        cout << "Test_2\t->\tFAILED" << endl;
        -:   40:    }
        -:   41:
        -:   42:    try
        -:   43:    {
        1:   44:        L->DeleteFirst();
        -:   45:    }
        2:   46:    catch (const List<int>::LIST_ERR &ex)
        -:   47:    {
        1:   48:        if (ex == List<int>::EEMPTY)
        1:   49:            cout << "Test_3\t->\tPASSED" << endl;
        -:   50:        else
    =====:   51:            cout << "Test_3\t->\tFAILED" << endl;
        -:   52:    }
    =====:   53:    catch (...)
        -:   54:    {
    =====:   55:        cout << "Test_3\t->\tFAILED" << endl;
        -:   56:    }
        -:   57:
        -:   58:    try
        -:   59:    {
        1:   60:        L->DeleteLast();
        -:   61:    }
        2:   62:    catch (const List<int>::LIST_ERR &ex)
        -:   63:    {
        1:   64:        if (ex == List<int>::EEMPTY)
        1:   65:            cout << "Test_4\t->\tPASSED" << endl;
        -:   66:        else
    =====:   67:            cout << "Test_4\t->\tFAILED" << endl;
        -:   68:    }
    =====:   69:    catch (...)
        -:   70:    {
    =====:   71:        cout << "Test_4\t->\tFAILED" << endl;
        -:   72:    }
        -:   73:
        -:   74:    try
        -:   75:    {
        1:   76:        L->GetNode(0);
        -:   77:    }
        2:   78:    catch (const List<int>::LIST_ERR &ex)
        -:   79:    {
        1:   80:        if (ex == List<int>::EEMPTY)
        1:   81:            cout << "Test_5\t->\tPASSED" << endl;
        -:   82:        else
    =====:   83:            cout << "Test_5\t->\tFAILED" << endl;
        -:   84:    }
    =====:   85:    catch (...)
        -:   86:    {
    =====:   87:        cout << "Test_5\t->\tFAILED" << endl;
        -:   88:    }
        -:   89:
        -:   90:    try
        -:   91:    {
        1:   92:        L->SetNode(0, 4);
        -:   93:    }
        2:   94:    catch (const List<int>::LIST_ERR &ex)
        -:   95:    {
        1:   96:        if (ex == List<int>::EEMPTY)
        1:   97:            cout << "Test_6\t->\tPASSED" << endl;
        -:   98:        else
    =====:   99:            cout << "Test_6\t->\tFAILED" << endl;
        -:  100:    }
    =====:  101:    catch (...)
        -:  102:    {
    =====:  103:        cout << "Test_6\t->\tFAILED" << endl;
        -:  104:    }
        -:  105:
        1:  106:    const int n = 10;
        1:  107:    int a[n] = {0,1,2,3,4,5,6,7,8,9};
        -:  108:
       11:  109:    for(unsigned i = 0; i < n; i++)
       10:  110:        if(i % 2 == 0)
        -:  111:        {
        -:  112:            try
        -:  113:            {
        5:  114:                L->AddHead(a[i]);
        -:  115:            }
    =====:  116:            catch (...)
        -:  117:            {
    =====:  118:                cout << "Test_" << 7+i << "\t->\tFAILED" << endl;
        -:  119:            }
        5:  120:            cout << "Test_" << 7+i << "\t->\tPASSED" << endl;
        -:  121:        }
        -:  122:        else
        -:  123:        {
        -:  124:            try
        -:  125:            {
        5:  126:                L->AddTail(a[i]);
        -:  127:            }
    =====:  128:            catch (...)
        -:  129:            {
    =====:  130:                cout << "Test_" << 7+i << "\t->\tFAILED" << endl;
        -:  131:            }
        5:  132:            cout << "Test_" << 7+i << "\t->\tPASSED" << endl;
        -:  133:        }
        -:  134:
        -:  135:    try
        -:  136:    {
        1:  137:        L->Delete(100);
        -:  138:    }
        2:  139:    catch (const List<int>::LIST_ERR &ex)
        -:  140:    {
        1:  141:        if (ex == List<int>::ESIZE)
        1:  142:            cout << "Test_17\t->\tPASSED" << endl;
        -:  143:        else
    =====:  144:            cout << "Test_17\t->\tFAILED" << endl;
        -:  145:    }
    =====:  146:    catch (...)
        -:  147:    {
    =====:  148:        cout << "Test_17\t->\tFAILED" << endl;
        -:  149:    }
        -:  150:
        -:  151:    try
        -:  152:    {
        1:  153:        L->Delete(2);
        -:  154:    }
    =====:  155:    catch (...)
        -:  156:    {
    =====:  157:        cout << "Test_18\t->\tFAILED" << endl;
        -:  158:    }
        1:  159:    cout << "Test_18\t->\tPASSED" << endl;
        -:  160:
        -:  161:    try
        -:  162:    {
        1:  163:        L->DeleteFirst();
        -:  164:    }
    =====:  165:    catch (...)
        -:  166:    {
    =====:  167:        cout << "Test_19\t->\tFAILED" << endl;
        -:  168:    }
        1:  169:    cout << "Test_19\t->\tPASSED" << endl;
        -:  170:
        -:  171:    try
        -:  172:    {
        1:  173:        L->DeleteLast();
        -:  174:    }
    =====:  175:    catch (...)
        -:  176:    {
    =====:  177:        cout << "Test_20\t->\tFAILED" << endl;
        -:  178:    }
        1:  179:    cout << "Test_20\t->\tPASSED" << endl;
        -:  180:
        -:  181:    try
        -:  182:    {
        1:  183:        L->Insert(2, 9);
        -:  184:    }
    =====:  185:    catch (...)
        -:  186:    {
    =====:  187:        cout << "Test_21\t->\tFAILED" << endl;
        -:  188:    }
        1:  189:    cout << "Test_21\t->\tPASSED" << endl;
        -:  190:
        -:  191:    try
        -:  192:    {
        1:  193:        L->GetNode(1);
        -:  194:    }
    =====:  195:    catch (...)
        -:  196:    {
    =====:  197:        cout << "Test_22\t->\tFAILED" << endl;
        -:  198:    }
        1:  199:    cout << "Test_22\t->\tPASSED" << endl;
        -:  200:
        -:  201:    try
        -:  202:    {
        1:  203:        L->GetNode(100);
        -:  204:    }
        2:  205:    catch (const List<int>::LIST_ERR &ex)
        -:  206:    {
        1:  207:        if (ex == List<int>::ESIZE)
        1:  208:            cout << "Test_23\t->\tPASSED" << endl;
        -:  209:        else
    =====:  210:            cout << "Test_23\t->\tFAILED" << endl;
        -:  211:    }
    =====:  212:    catch (...)
        -:  213:    {
    =====:  214:        cout << "Test_23\t->\tFAILED" << endl;
        -:  215:    }
        -:  216:
        -:  217:    try
        -:  218:    {
        1:  219:        L->SetNode(100, 4);
        -:  220:    }
        2:  221:    catch (const List<int>::LIST_ERR &ex)
        -:  222:    {
        1:  223:        if (ex == List<int>::ESIZE)
        1:  224:            cout << "Test_24\t->\tPASSED" << endl;
        -:  225:        else
    =====:  226:            cout << "Test_24\t->\tFAILED" << endl;
        -:  227:    }
    =====:  228:    catch (...)
        -:  229:    {
    =====:  230:        cout << "Test_24\t->\tFAILED" << endl;
        -:  231:    }
        -:  232:
        -:  233:    try
        -:  234:    {
        1:  235:        L->SetNode(1, 99);
        -:  236:    }
    =====:  237:    catch (...)
        -:  238:    {
    =====:  239:        cout << "Test_25\t->\tFAILED" << endl;
        -:  240:    }
        1:  241:    cout << "Test_25\t->\tPASSED" << endl;
        -:  242:
        -:  243:    try
        -:  244:    {
        1:  245:        L->GetCount();
        -:  246:    }
        -:  247:    catch (...)
        -:  248:    {
        -:  249:        cout << "Test_26\t->\tFAILED" << endl;
        -:  250:    }
        1:  251:    cout << "Test_26\t->\tPASSED" << endl;
        -:  252:
        1:  253:    List<int>* T = new List<int>;
        -:  254:
        1:  255:    *T = *L;
        1:  256:    *T = *T;
        -:  257:
        1:  258:    if(*T >= *L)
        1:  259:        cout << "Test_27\t->\tPASSED" << endl;
        -:  260:    else
    #####:  261:        cout << "Test_27\t->\tFAILED" << endl;
        -:  262:
        1:  263:    if(*T <= *L)
        1:  264:        cout << "Test_28\t->\tPASSED" << endl;
        -:  265:    else
    #####:  266:        cout << "Test_28\t->\tFAILED" << endl;
        -:  267:
        1:  268:    T->SetNode(7, -5);
        1:  269:    if(*T != *L)
        1:  270:        cout << "Test_29\t->\tPASSED" << endl;
        -:  271:    else
    #####:  272:        cout << "Test_29\t->\tFAILED" << endl;
        -:  273:
        1:  274:    T->DeleteLast();
        1:  275:    if(*T != *L)
        1:  276:        cout << "Test_30\t->\tPASSED" << endl;
        -:  277:    else
    #####:  278:        cout << "Test_30\t->\tFAILED" << endl;
        -:  279:
        1:  280:    if(*L <= *T && !(*T <= *L))
    #####:  281:        cout << "Test_31\t->\tFAILED" << endl;
        -:  282:    else
        1:  283:        cout << "Test_31\t->\tPASSED" << endl;
        -:  284:
        1:  285:    if(*L >= *T && *T <= *L && !(*T >= *L))
        1:  286:        cout << "Test_32\t->\tPASSED" << endl;
        -:  287:    else
    #####:  288:        cout << "Test_32\t->\tFAILED" << endl;
        -:  289:
        1:  290:    cout << "List L:" << endl;
        1:  291:    cout << *L;
        -:  292:
        1:  293:    cout << "List T:" << endl;
        1:  294:    cout << *T;
        -:  295:
        2:  296:    List<int> Sum(*L);
        -:  297:
        1:  298:    Sum = -*L + *T;
        -:  299:
        1:  300:    cout << "List Sum:" << endl;
        1:  301:    cout << Sum;
        -:  302:
        1:  303:    delete L;
        1:  304:    delete T;
        -:  305:
        1:  306:    List<int>* R = new List<int>;
        -:  307:    try
        -:  308:    {
        1:  309:        R->Insert(0, -1);
        -:  310:    }
    =====:  311:    catch (...)
        -:  312:    {
    =====:  313:        cout << "Test_33\t->\tFAILED" << endl;
        -:  314:    }
        1:  315:    cout << "Test_33\t->\tPASSED" << endl;
        -:  316:
        -:  317:    try
        -:  318:    {
        1:  319:        R->Insert(0, -2);
        -:  320:    }
    =====:  321:    catch (...)
        -:  322:    {
    =====:  323:        cout << "Test_34\t->\tFAILED" << endl;
        -:  324:    }
        1:  325:    cout << "Test_34\t->\tPASSED" << endl;
        -:  326:
        -:  327:    try
        -:  328:    {
        1:  329:        R->DeleteFirst();
        1:  330:	R->DeleteFirst();
        -:  331:    }
    =====:  332:    catch (...)
        -:  333:    {
    =====:  334:        cout << "Test_35\t->\tFAILED" << endl;
        -:  335:    }
        1:  336:    cout << "Test_35\t->\tPASSED" << endl;
        -:  337:
        1:  338:    delete R;
        -:  339:
        1:  340:    return 0;
        3:  341:}
